#!/usr/bin/perl
use strict;
use warnings;

my $host = `n9`;
chomp $host;

my %replacements = (
  'emumaster' => 'diskgallery',
);

my @config = qw(
  call-history
  messaging-ui
  QmlMozBrowser
  browser

  finch
  klomp
  camera-ui
  mtermite
  mail
  duicontrolpanel

  nokia-drive-qml
  contacts
  clock
  FBReader
  music-suite
  video-suite

  qtbtn-klomp
  meeseepics
  
  dir-tools[
    dropcache-mdn
    dcim-reindex
    restart-wifi
    dontgosleep
    screenshotmee
  ]
  dir-useful[
    qtbtn-power
    qtodo
    call-log
    brujula
    dingmee
    transmission
  ]
  dir-cute[
    joikuspot
    qtbigtext
    teatime
    vmpkn9
    xmcr
    emumaster
  ]
  dir-junk[
    contact-coocoo
    fennec
    mymoves
    waze
    NokiaPt
    accountsui
    btinput-terminal
    btinput
    toggleBT
    gallery
    calendar
    ovistoreclient
    pidgin
    n9-button-monitor
    profilematic
  ]
);

for my $entry(@config){
  if(defined $replacements{$entry}){
    $entry = $replacements{$entry};
  }
}

my @quickLaunch = qw(
  call-history
  messaging-ui
  fennec 
  camera-ui
);


my %apps;
my %appDirs;
my %dirs;
my %dirNames;

my $appDir = '/usr/share/applications';
my $unusedDir = '/opt/unused-applications';
my $directoryDir = '/home/user/.local/share/applications';
my $quickLaunchDir = '/home/user/.local/share/applications';
my $confFileDest = '/home/user/.config/meegotouchhome-nokia/launcherbuttons.data';

sub appendHarmattans();
sub parseConfig();
sub getValidDesktopNames();
sub launcherPath($);
sub createAppDesktopFiles();
sub createDirDesktopFiles();
sub createQuickLauncherDesktopFiles();
sub getAppData();
sub getDirData();
sub getQuickLauncherData();
sub getData();
sub writeLauncherButtonsData($);

sub main(@){
  if(@_ == 1 and $_[0] eq '-g'){
    print getValidDesktopNames();
    exit 0;
  }
  die "Usage: $0   or  $0 -g\n" if @_ > 0;
  
  system "n9 -s stop xsession/mthome";
  appendHarmattans();
  parseConfig();
  createAppDesktopFiles();
  createDirDesktopFiles();
  createQuickLauncherDesktopFiles();
  
  my $data = getData();
  system "ssh root\@$host killall meegotouchhome";
  writeLauncherButtonsData($data);
  system "n9 -s start xsession/mthome";
}

sub appendHarmattans(){
  my %harmattans;
  for my $valid(getValidDesktopNames()){
    if($valid =~ m/^(.*)_harmattan$/){
      $harmattans{$1} = 1
    }
  }
  for(my $i=0; $i<@config; $i++){
    if(defined $harmattans{$config[$i]}){
      $config[$i] .= "_harmattan";
      print "appending '_harmattan' to $config[$i]\n";
    }
  }
  for(my $i=0; $i<@quickLaunch; $i++){
    if(defined $harmattans{$config[$i]}){
      $quickLaunch[$i] .= "_harmattan";
      print "appending '_harmattan' to $quickLaunch[$i]\n";
    }
  }
}

sub parseConfig(){
  my $index = 0;
  my $nextDir = 1;
  for(my $i=0; $i<@config; $i++){
    my $item = $config[$i];
    if($item =~ /^dir-(.*)\[$/){
      my $dirName = $1;
      $dirs{$nextDir} = $index++;
      $dirNames{$nextDir} = $dirName;

      my $dirIndex = 0;
      while(++$i<@config and $config[$i] ne ']'){
        my $app = $config[$i];
        $appDirs{$app} = $nextDir;
        $apps{$app} = $dirIndex++;
      }

      $nextDir++;
    }else{
      my $app = $config[$i];
      $apps{$app} = $index++;
    }
  }
}

sub getValidDesktopNames(){
  my @names = `n9 -s 'ls $appDir/*.desktop $unusedDir/*.desktop'`;
  for my $name(@names){
    $name =~ s/.desktop$//;
    $name =~ s/^.*\///;
  }
  return @names;
}

sub launcherPath($){
  my $path = shift;
  $path =~ s/^\///;
  $path =~ s/\//\\/g;
  return $path;
}


sub createAppDesktopFiles(){
  system "ssh", "root\@$host", "
    set -x
    mkdir -p $unusedDir
    cd $appDir
    mv *.desktop $unusedDir
    rm -rf $appDir
    mkdir -p $appDir
  ";

  my $cmd = "cd $unusedDir\n";
  for my $app(keys %apps){
    $cmd .= "mv $app.desktop $appDir\n";
  }
  print $cmd;
  system "ssh", "root\@$host", $cmd;
}

sub createDirDesktopFiles(){
  system "ssh", "root\@$host", "rm $directoryDir/*.directory";
  for my $dir(sort keys %dirs){
    my $dirName = $dirNames{$dir};
    my $content = ''
      . "[Desktop Entry]\n"
      . "Type=Directory\n"
      . "Name=$dirName\n"
      . "X-MeeGo-Folder-Index=$dir\n"
      . "Icon=icon-l-default-application\n"
      . "OnlyShowIn=X-MeeGo;\n"
      ;
    my $tmpFile = "/tmp/meego-dir";
    open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
    print FH $content;
    close FH;
    my $fileName = "$directoryDir/folder$dir.directory";
    system "scp", $tmpFile, "root\@$host:$fileName";
  }
  system "ssh", "root\@$host", "chown user.users -R $directoryDir";
}

sub createQuickLauncherDesktopFiles(){
  my $cmd = "rm $quickLaunchDir/*.desktop\n";
  for(my $i=0; $i<@quickLaunch; $i++){
    my $qlFile = "$quickLaunchDir/quicklaunchbar$i.desktop";
    $cmd .= "ln -s $appDir/$quickLaunch[$i].desktop $qlFile;\n";
  }
  $cmd .= "chown user.users -R $quickLaunchDir\n";
  print $cmd;
  system "ssh", "root\@$host", $cmd;
}



sub getAppData(){
  my $data = '';
  for my $app(sort keys %apps){
    my $index = $apps{$app};
    my $dir = $appDirs{$app};
    $dir = 0 if not defined $dir;
    
    my $desktopFile = "$appDir/$app.desktop";
    $data .= launcherPath($desktopFile) . "=launcher/$dir/$index\n";
  }
  return $data;
}

sub getDirData(){
  my $data = '';
  for my $dir(sort keys %dirs){
    my $dirName = $dirNames{$dir};
    my $index = $dirs{$dir};
    my $desktopFile = "$directoryDir/folder$dir.directory";
    $data .= launcherPath($desktopFile) . "=launcher/0/$index\n";
  }
  return $data;
}

sub getQuickLauncherData(){
  my $data = '';
  for(my $i=0; $i<@quickLaunch; $i++){
    my $desktopFile = "$quickLaunchDir/quicklaunchbar$i.desktop";
    $data .= launcherPath($desktopFile) . "=quicklaunchbar/$i\n";
  }
  return $data;
}

sub getData(){
  my $data = "[DesktopEntries]\n";
  $data .= getDirData();
  $data .= getQuickLauncherData();
  $data .= getAppData();
  return $data;
}

sub writeLauncherButtonsData($){
  my $data = shift;
  print $data;

  my $tmpFile = "/tmp/launcherbuttons.data";
  open FH, "> $tmpFile" or die "Couldnt write to $tmpFile\n";
  print FH $data;
  close FH;

  system 'scp', $tmpFile, "root\@$host:$confFileDest";
}

&main(@ARGV);
