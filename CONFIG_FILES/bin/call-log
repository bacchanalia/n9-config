#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor;

my $callLogGen = "/home/user/MyDocs/backup-call/call-log-gen.call";
my $callLogBackup = "/home/user/MyDocs/backup-call/all.call";

my @callFiles = ($callLogGen, $callLogBackup);
my $okCallFiles = join "\n      ", @callFiles;

my $usage = "Usage:
  $0 [--update] [call-file]
    Parse and display a call-file
    If call-file is not given, select the most recent non-empty file among:
      $okCallFiles

  --update
    Run callbackuprestore first and stick it in $callLogGen
";

my %dirMap = (
  0 => 'out',
  1 => 'inc',
  2 => 'mis',
);
my %dirColor = (
  0 => 'white bold underline',
  1 => 'green bold underline',
  2 => 'red bold underline',
);

sub selectCallFile(@);
sub formatCall($$$$$);
sub dateToEpoch($);
sub hms($);
sub padr($$);
sub run(@);

sub main(@){
  if(@_ == 1 and $_[0] eq "--update"){
    shift;
    my $tmp = '/tmp/call-tmp-' . time;
    run "backup-comm call --retry 5 $tmp >/dev/null";
    run "cp", $tmp, $callLogGen;
  }

  my $f = shift;
  die $usage if @_ > 0;

  if(not defined $f){
    $f = selectCallFile(@callFiles);
  }

  my @lines = `cat $f`;
  my $index = 0;
  for my $line(@lines){
    my $date = "\\d+-\\d+-\\d+ \\d+:\\d+:\\d+";
    if($line =~ /^[^,]*,\s*(\d+),(0|1|2),($date),($date)$/){
      my ($num, $dir, $start, $end) = ($1, $2, $3, $4);
      print formatCall($num, $dir, $start, $end, $index++);
    }
  }
}

sub selectCallFile(@){
  my ($curFile, $curMtime);
  for my $file(@_){
    next if -z $file;
    my $mtime = (stat $file)[9];
    if(not defined $curMtime or $mtime > $curMtime){
      $curMtime = $mtime;
      $curFile = $file;
    }
  }
  return $curFile;
}

sub formatCall($$$$$){
  my ($number, $dir, $start, $end, $index) = @_;
  my $durSex = dateToEpoch($end) - dateToEpoch($start);
  return ''
    . color($dirColor{$dir})
    . padr($number, 13)
    . $dirMap{$dir} . ' '
    . $start . '  '
    . hms($durSex)
    . color('reset')
    . "\n";
}
sub dateToEpoch($){
  my $d = shift;
  my $out = `date +%s -d "$d"`;
  chomp $out;
  return $out;
}
sub hms($){
  my $t = shift;
  $t = int(0.5 + $t);
  my $h = int($t / (60*60));
  my $m = int($t % (60*60) / (60));
  my $s = $t - ($m*60) - ($h*60*60);
  $s = "0$s" if $s < 10;
  if($h == 0){
    return "$m:$s";
  }else{
    $m = "0$m" if $m < 10;
    return "$h:$m:$s";
  }
}
sub padr($$){
  my ($s, $len) = @_;
  return $s . (' ' x ($len - length($s)));
}

sub run(@){
  print "@_\n";
  system @_;
  die "Error running @_\n" if $? != 0;
}

&main(@ARGV);
